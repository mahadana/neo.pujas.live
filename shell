#!/bin/bash

if [ $# = 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  cat <<EOF
Usage: $0 <service> [command...]

Shortcuts:

  Bash shell in frontend            $0 frontend
  Bash shell in backend             $0 backend
  Run tests in frontend             $0 frontend test
  Watch tests in frontend           $0 frontend watch
  Strapi (re)build                  $0 backend build
  Strapi console                    $0 backend console
  PostgreSQL console                $0 db console
  Redis console                     $0 redis console
  Reload database                   $0 reload-db
  Clean containers, cache, etc...   $0 clean

Note: Services must already be running (docker-compose up).
EOF
  exit 1
fi

SERVICE="$1"
shift

case "$SERVICE" in
  frontend)
    if [ "$*" == "test" ]; then
      set npm run test
    elif [ "$*" == "watch" ]; then
      set npm run watch
    fi
    ;;
  backend|strapi)
    SERVICE="backend"
    if [ "$*" == "build" ]; then
      set bash -c 'rm -rf build/* cache/* && npx strapi build'
    elif [ "$*" == "console" ]; then
      set npx -c 'PORT=1338 strapi console'
    fi
    ;;
  db|postgres)
    SERVICE="db"
    if [ "$*" == "console" ]; then
      set psql -U strapi
    fi
    ;;
  redis)
    if [ "$*" == "console" ]; then
      set redis-cli
    fi
    ;;
  reload-db)
    cd "$(dirname "$0")"
    docker-compose stop backend db
    docker-compose rm -f db
    docker volume prune -f
    docker-compose up -d backend db
    exit 0
    ;;
  clean)
    cd "$(dirname "$0")"
    docker-compose down
    if docker image ls | grep -q pujaslive; then
      docker image rm $(docker image ls | grep pujaslive | tr -s ' ' | cut -d ' ' -f 3)
    fi
    if docker volume ls -q | grep -q pujaslive; then
      docker volume rm $(docker volume ls -q | grep pujaslive)
    fi
    docker volume prune -f
    rm -rf backend/.cache backend/.tmp backend/build \
          backend/exports backend/node_modules \
          frontend/.next frontend/node_modules \
          worker/build worker/node_modules
    exit 0
    ;;
esac

case "$SERVICE" in
  backend|frontend|worker)
    USER="$(docker-compose exec "$SERVICE" stat -c %U /app | sed 's/[^[:print:]]//g')"
    ;;
  *)
    USER=root
    ;;
esac

if [ $# = 0 ]; then
  set bash
fi

docker-compose exec -u "$USER" "$SERVICE" "$@"
