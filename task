#!/bin/bash

if [ $# = 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  cat <<EOF
Usage: $0 <service> [command...]

  Bash shell                        $0 <backend|frontend|worker>
  Strapi console                    $0 backend console
  PostgreSQL console                $0 postgres console
  Redis console                     $0 redis console

  Run all tests                     $0 test
  Run <service> tests               $0 <backend|frontend|worker> test
  Watch <service> tests             $0 <backend|frontend|worker> watch

  Add fake data                     $0 fake
  (Re)build Strapi admin            $0 build-admin
  Reset database                    $0 reset-db
  Clean containers, cache, etc...   $0 clean

Note: Services must already be running (docker-compose up).
EOF
  exit 1
fi

SERVICE="$1"
shift

case "$SERVICE" in
  frontend)
    if [ "$*" == "test" ]; then
      set npm run test
    elif [ "$*" == "watch" ]; then
      set npm run watch
    fi
    ;;
  backend|strapi)
    SERVICE="backend"
    if [ "$*" == "test" ]; then
      set npm run test
    elif [ "$*" == "watch" ]; then
      set npm run watch
    elif [ "$*" == "build-admin" ]; then
      set bash -c 'rm -rf build/* cache/* && npx strapi build'
    elif [ "$*" == "console" ]; then
      set npx -c 'PORT=1338 strapi console'
    elif [ "$*" == "fake" ]; then
      set bash -c 'node lib/fake'
    fi
    ;;
  db|postgres)
    SERVICE="postgres"
    if [ "$*" == "console" ]; then
      set psql -U strapi
    fi
    ;;
  redis)
    if [ "$*" == "console" ]; then
      set redis-cli
    fi
    ;;
  worker)
    if [ "$*" == "test" ]; then
      set npm run test
    elif [ "$*" == "watch" ]; then
      set npm run watch
    fi
    ;;
  build-admin)
    "$0" backend build-admin
    exit 0
    ;;
  fake)
    "$0" backend fake
    exit 0
    ;;
  test)
    "$0" backend test
    "$0" frontend test
    "$0" worker test
    exit 0
    ;;
  reset-db|reload-db)
    cd "$(dirname "$0")"
    docker-compose stop -t 1 backend postgres
    docker-compose rm -f postgres
    docker volume prune -f
    rm -rf backend/public/uploads/*
    docker-compose up -d backend postgres
    exit 0
    ;;
  clean)
    cd "$(dirname "$0")"
    docker-compose down
    if docker image ls | grep -q pujaslive; then
      docker image rm $(docker image ls | grep pujaslive | tr -s ' ' | cut -d ' ' -f 3)
    fi
    if docker volume ls -q | grep -q pujaslive; then
      docker volume rm $(docker volume ls -q | grep pujaslive)
    fi
    docker volume prune -f
    rm -rf backend/.cache backend/.tmp backend/build \
          backend/exports backend/node_modules \
          backend/public/uploads/* \
          frontend/.next frontend/node_modules \
          worker/build worker/node_modules
    exit 0
    ;;
esac

case "$SERVICE" in
  backend|frontend|worker)
    USER="$(docker-compose exec "$SERVICE" stat -c %U /app | sed 's/[^[:print:]]//g')"
    ;;
  *)
    USER=root
    ;;
esac

if [ $# = 0 ]; then
  set bash
fi

docker-compose exec -u "$USER" "$SERVICE" "$@"
